import { createSlice } from "@reduxjs/toolkit";

// Initial state for the books slice, including an empty array of books, total price, and token (initially set to null)
const initialState = {
  books: [],         // Array to store books in the cart
  totalPrice: 0,     // Total price of all items in the cart
  token: null,       // Authentication token (null initially, will be set after login)
};

// Create a Redux slice named "books" using createSlice from Redux Toolkit
export const BookSlice = createSlice({
  name: "books",     // Name of the slice
  initialState,      // Initial state defined above
  reducers: {
    // Reducer function to add a book to the cart
    addToCart: (state, action) => {
      const { id } = action.payload;
      const existingBook = state.books.find((book) => book.id === id);
      if (existingBook) {
        return; // If book already exists in the cart, do nothing
      }
      state.books.push(action.payload); // Add the new book to the cart
      // Recalculate total price based on updated cart
      state.totalPrice = state.books.reduce(
        (total, book) => total + book.price * book.quantity,
        0
      );
    },

    // Reducer function to remove a book from the cart
    removeFromCart: (state, action) => {
      state.books = state.books.filter((book) => book.id !== action.payload);
      // Recalculate total price based on updated cart
      state.totalPrice = state.books.reduce(
        (total, book) => total + book.price * book.quantity,
        0
      );
    },

    // Reducer function to increment the quantity of a book in the cart
    incrementQuantity: (state, action) => {
      const book = state.books.find((book) => book.id === action.payload);
      if (book) {
        book.quantity += 1; // Increment quantity of the specified book
        // Recalculate total price based on updated cart
        state.totalPrice = state.books.reduce(
          (total, book) => total + book.price * book.quantity,
          0
        );
      }
    },

    // Reducer function to decrement the quantity of a book in the cart
    decrementQuantity: (state, action) => {
      const book = state.books.find((book) => book.id === action.payload);
      if (book && book.quantity > 1) {
        book.quantity -= 1; // Decrement quantity of the specified book (if quantity is greater than 1)
        // Recalculate total price based on updated cart
        state.totalPrice = state.books.reduce(
          (total, book) => total + book.price * book.quantity,
          0
        );
      }
    },

    // Reducer function to clear the entire cart
    clearCart: (state) => {
      state.books = [];      // Clear the array of books in the cart
      state.totalPrice = 0;  // Reset the total price to zero
    },

    // Reducer function to save the authentication token to the state
    saveToken: (state, action) => {
      state.token = action.payload; // Set the token to the payload received from the action
      console.log('Token saved:', action.payload); // Log the saved token
    },
  },
});

// Export the action creators generated by createSlice for use in components or other parts of the app
export const {
  addToCart,
  removeFromCart,
  clearCart,
  incrementQuantity,
  decrementQuantity,
  saveToken,
} = BookSlice.actions;

// Export the reducer function generated by createSlice to be used when creating the Redux store
export default BookSlice.reducer;

// Selectors to retrieve data from the state
export const selectTotalPrice = (state) => state.books.totalPrice;
export const selectBooksInCart = (state) => state.books.books;
export const selectToken = (state) => state.books.token;
